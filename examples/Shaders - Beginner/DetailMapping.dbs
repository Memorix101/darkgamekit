string Description = "This shader adds a detail texture to a color texture";
string Thumbnail = "DetailMapping.png";

float4x4 WorldViewProj : WorldViewProjection;
float4x4 World : World;
float4 viewpos : CameraPosition;
float time : time;

float detailScale
<
	string UIWidget = "slider";
	float UIMax = 16.0;
	float UIMin = 0.1;
	float UIStep = 0.01;
> = 4.000000;

float brightness
<
	string UIWidget = "slider";
	float UIMax = 4.0;
	float UIMin = 0.5;
	float UIStep = 0.1;
> = 1.500000;

texture BaseTex : DIFFUSE
<
	string ResourceName = "door1.jpg";
	string ResourceType = "2D";
>;

sampler BaseSamp = sampler_state
{
	Texture = <BaseTex>;
	MinFilter = Linear;
	MagFilter = Linear;
	MipFilter = Linear;
	AddressU = Wrap;
	AddressV = Wrap;
};

texture DetailTex : DIFFUSE
<
	string ResourceName = "ground.jpg";
	string ResourceType = "2D";
>;

sampler DetailSamp = sampler_state
{
	Texture = <DetailTex>;
	MinFilter = Linear;
	MagFilter = Linear;
	MipFilter = Linear;
	AddressU = Wrap;
	AddressV = Wrap;
};

struct app_in
{
	float4 pos : POSITION;
	float2 uv : TEXCOORD0;
};

struct vs_out
{
	float4 pos : POSITION;
	float2 uv : TEXCOORD0;
	float2 uv1 : TEXCOORD1;
};

vs_out DefaultVertexShader( app_in IN )
{
	vs_out OUT;
	
	//calculate vertex position and generate second uv co-ordinate
	OUT.pos = mul( IN.pos, WorldViewProj );
	OUT.uv = IN.uv;
	OUT.uv1 = IN.uv * detailScale;
	
	return OUT;
}

float4 DefaultPixelShader( vs_out IN ) : COLOR
{
	//multiply the base and detail textures together, and a brightness value
	return tex2D(BaseSamp,IN.uv) * tex2D(DetailSamp,IN.uv1) * brightness;
}

technique MyShader
{
	pass p0
	{
		VertexShader = compile vs_1_1 DefaultVertexShader( );
		PixelShader = compile ps_2_0 DefaultPixelShader( );
	}
}
